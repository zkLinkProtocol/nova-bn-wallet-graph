type Pool @entity(immutable: false) {
  # pool id + token Address
  id: Bytes!
  # token address
  underlying: Bytes!
  # underlying  balance
  decimals: BigInt!
  # underlying  balance
  balance: BigInt!
  # total supplied
  totalSupplied: BigInt!

  symbol: String!

  name: String!
}

type PoolTokenPosition @entity(immutable: false) {
  # user account + token address + poolId
  id: Bytes!
  # token address
  token: Bytes!
  # pool id
  pool: Bytes!
  # total supply amount by user (used to calc the shared balance)
  supplied: BigInt!
  # pool name
  poolName: String!
  # user account
  userPosition: UserPosition!
}

A - B 
A - pool
type UserPosition @entity(immutable: false) {
  # account
  id: Bytes!

  balance: BigInt!

  validate: Boolean! # if it is a pool position

  withdrawHistory: [Withdrawn!]! @derivedFrom(field: "userPosition")

  positions: [PoolTokenPosition!]! @derivedFrom(field: "userPosition")
}

type Withdrawn @entity(immutable: true) {
  # transaction hash
  id: Bytes!

  token: Bytes!

  balance: BigInt!

  blockNumber: BigInt!

  blockTimestamp: BigInt!

  userPosition: UserPosition!
}
